{"remainingRequest":"D:\\xblog\\xblog-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\xblog\\xblog-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\xblog\\xblog-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\xblog\\xblog-admin\\src\\views\\blog\\edit\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\xblog\\xblog-admin\\src\\views\\blog\\edit\\index.vue","mtime":1583590624587},{"path":"D:\\xblog\\xblog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\xblog\\xblog-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\xblog\\xblog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\xblog\\xblog-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\xblog\\\\xblog-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _request = _interopRequireDefault(require(\"@/utils/request\"));\n\nvar _tag = require(\"@/api/tag\");\n\nvar _blog = require(\"@/api/blog\");\n\nvar _Upload = _interopRequireDefault(require(\"@/components/Upload\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  components: {\n    lbUpload: _Upload.default\n  },\n  data: function data() {\n    return {\n      id: this.$route.query.id,\n      form: {\n        id: '',\n        title: '',\n        content: '',\n        tag: '',\n        typeName: '',\n        originalUrl: '',\n        blogImage: ''\n      },\n      checkedTags: [],\n      tags: [],\n      typeMap: {\n        '原创': 1,\n        '转载': 2,\n        '翻译': 3\n      },\n      toolbars: {\n        bold: true,\n        // 粗体\n        italic: true,\n        // 斜体\n        header: true,\n        // 标题\n        underline: true,\n        // 下划线\n        strikethrough: true,\n        // 中划线\n        mark: true,\n        // 标记\n        superscript: true,\n        // 上角标\n        subscript: true,\n        // 下角标\n        quote: true,\n        // 引用\n        ol: true,\n        // 有序列表\n        ul: true,\n        // 无序列表\n        link: true,\n        // 链接\n        imagelink: true,\n        // 图片链接\n        code: true,\n        // code\n        table: true,\n        // 表格\n        fullscreen: true,\n        // 全屏编辑\n        readmodel: true,\n        // 沉浸式阅读\n        htmlcode: true,\n        // 展示html源码\n        help: true,\n        // 帮助\n\n        /* 1.3.5 */\n        undo: true,\n        // 上一步\n        redo: true,\n        // 下一步\n        trash: true,\n        // 清空\n        save: true,\n        // 保存（触发events中的save事件）\n\n        /* 1.4.2 */\n        navigation: true,\n        // 导航目录\n\n        /* 2.1.8 */\n        alignleft: true,\n        // 左对齐\n        aligncenter: true,\n        // 居中\n        alignright: true,\n        // 右对齐\n\n        /* 2.2.1 */\n        subfield: true,\n        // 单双栏模式\n        preview: true // 预览\n\n      }\n    };\n  },\n  created: function created() {\n    this.initTags();\n\n    if (this.id) {\n      this.initForm();\n    }\n  },\n  methods: {\n    // 初始化标签列表\n    initTags: function initTags() {\n      var _this = this;\n\n      (0, _tag.fetchTagList)(1, 100).then(function (response) {\n        _this.tags = response.data.list;\n      });\n    },\n    initForm: function initForm() {\n      var _this2 = this;\n\n      (0, _blog.fetchBlog)(this.id).then(function (response) {\n        // 以下写法出现多余的属性\n        // this.form = response.data\n        for (var key in _this2.form) {\n          _this2.form[key] = response.data[key];\n        }\n\n        _this2.checkedTags = _this2.form.tag.split(',');\n      });\n    },\n    convertForm: function convertForm() {\n      // 转换form的tag形式\n      var result = '';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.checkedTags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var checkedTag = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = this.tags[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var tag = _step2.value;\n\n              if (tag.name === checkedTag) {\n                result += tag.id + ',';\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      result = result.substring(0, result.length - 1);\n      this.form.tag = result; // 转换form的type形式\n\n      this.form.type = this.typeMap[this.form.typeName];\n    },\n    onSubmit: function onSubmit() {\n      var _this3 = this;\n\n      this.convertForm();\n\n      if (this.id) {\n        (0, _blog.updateBlog)(this.form).then(function (response) {\n          _this3.$message({\n            type: 'success',\n            message: '发布成功!'\n          });\n\n          _this3.reset();\n        });\n      } else {\n        (0, _blog.addBlog)(this.form).then(function (response) {\n          _this3.$message({\n            type: 'success',\n            message: '发布成功!'\n          });\n\n          _this3.reset();\n        });\n      }\n    },\n    imgAdd: function imgAdd(pos, file) {\n      var _this4 = this;\n\n      //  先验证\n      if (!this.validateImage(file)) return; // 第一步.将图片上传到服务器.\n\n      var formData = new FormData();\n      formData.append('image', file);\n      (0, _request.default)({\n        url: process.env.VUE_APP_UPLOAD_URL,\n        withCredentials: false,\n        method: 'post',\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(function (response) {\n        // 第二步.将返回的url替换到文本原位置![...](0) -> ![...](url)\n        _this4.$refs.md.$img2Url(pos, response.data.url);\n      });\n    },\n    validateImage: function validateImage(file) {\n      var isImg = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/gif' || file.type === 'image/bmp';\n      var isLt4M = file.size / 1024 / 1024 < 4;\n\n      if (!isImg) {\n        this.$message.error('上传的文件必须是图片!');\n      }\n\n      if (!isLt4M) {\n        this.$message.error('上传头像图片大小不能超过 4MB!');\n      }\n\n      return isImg && isLt4M;\n    },\n    reset: function reset() {\n      for (var key in this.form) {\n        this.form[key] = '';\n      }\n\n      this.id = '';\n      this.checkedTags = [];\n    }\n  }\n};\nexports.default = _default;",null]}