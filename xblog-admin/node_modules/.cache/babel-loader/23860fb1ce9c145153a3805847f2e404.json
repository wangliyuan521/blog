{"remainingRequest":"D:\\xblog\\xblog-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\xblog\\xblog-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\xblog\\xblog-admin\\src\\utils\\request.js","dependencies":[{"path":"D:\\xblog\\xblog-admin\\src\\utils\\request.js","mtime":1583590624584},{"path":"D:\\xblog\\xblog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\xblog\\xblog-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\xblog\\xblog-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\xblog\\\\xblog-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _md5Hex = _interopRequireDefault(require(\"md5-hex\"));\n\nvar _utf = require(\"./utf8\");\n\nvar _elementUi = require(\"element-ui\");\n\nvar _auth = require(\"@/utils/auth\");\n\n// 接口密钥，需要与后台一致\nvar CIPHER = process.env.VUE_APP_CIPHER; // create an axios instance\n\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: true,\n  // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n\n}); // 默认为application/json\n\n\nservice.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (_store.default.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    config.headers['X-Token'] = (0, _auth.getToken)();\n  } // 签名认证\n\n\n  if (!config.params) {\n    config.params = {};\n  }\n\n  var sign = getSign(config);\n  config.params['sign'] = sign;\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  var res = response.data; // if the custom code is not 200, it is judged as an error.\n\n  if (res.code !== 200) {\n    (0, _elementUi.Message)({\n      message: res.message || 'Error',\n      type: 'error',\n      duration: 5 * 1000\n    }); // 自定义状态吗，未登录则重定向\n\n    if (res.code === 4011) {\n      // to re-login\n      _elementUi.MessageBox.confirm('当前登录无效，请重新登录！', '重新登录', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _store.default.dispatch('admin/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\n\nfunction getLinkedString(config) {\n  var arr = [];\n  var dataObj = {};\n\n  for (var key in config.params) {\n    arr.push(key);\n  }\n\n  if (isString(config.data)) {\n    dataObj = _qs.default.parse(config.data);\n\n    for (var _key in dataObj) {\n      arr.push(_key);\n    }\n  } else if (config.data instanceof FormData) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = config.data.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _key2 = _step.value;\n\n        if (!(config.data.get(_key2) instanceof Object)) {\n          arr.push(_key2);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else {\n    for (var _key3 in config.data) {\n      if (!(config.data[_key3] instanceof Object)) {\n        arr.push(_key3);\n      }\n    }\n  }\n\n  arr.sort();\n  var str = '';\n\n  for (var i in arr) {\n    if (config.params[arr[i]]) {\n      str += arr[i] + '=' + config.params[arr[i]] + '&';\n    } else {\n      if (config.data instanceof FormData) {\n        str += arr[i] + '=' + config.data.get(arr[i]) + '&';\n      } else if (isString(config.data)) {\n        str += arr[i] + '=' + dataObj[arr[i]] + '&';\n      } else {\n        str += arr[i] + '=' + config.data[arr[i]] + '&';\n      }\n    }\n  }\n\n  return str.substr(0, str.length - 1);\n}\n\nfunction isString(str) {\n  return typeof str === 'string' && str.constructor === String;\n}\n\nfunction getSign(config) {\n  var linkedString = getLinkedString(config);\n  var sign = (0, _md5Hex.default)((0, _utf.toByteStringUTF8)(linkedString + CIPHER));\n  return sign;\n}\n\nvar _default = service;\nexports.default = _default;",null]}